/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class TaskService {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param taskCode (optional) 
     * @param questionTypeId (optional) 
     * @param moduleName (optional) 
     * @param createdBy (optional) 
     * @param taskId (optional) 
     * @param sortBy (optional) 
     * @return Success
     */
    getTaskViewData(startDate: Date | null | undefined, endDate: Date | null | undefined, taskCode: string | null | undefined, questionTypeId: number | null | undefined, moduleName: string | null | undefined, createdBy: string | null | undefined, taskId: number | null | undefined, sortBy: string | null | undefined, pageIndex: number, pageSize: number): Promise<TaskPaginationModel> {
        let url_ = this.baseUrl + "/api/Task/getviewdata?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (taskCode !== undefined)
            url_ += "TaskCode=" + encodeURIComponent("" + taskCode) + "&"; 
        if (questionTypeId !== undefined)
            url_ += "QuestionTypeId=" + encodeURIComponent("" + questionTypeId) + "&"; 
        if (moduleName !== undefined)
            url_ += "ModuleName=" + encodeURIComponent("" + moduleName) + "&"; 
        if (createdBy !== undefined)
            url_ += "CreatedBy=" + encodeURIComponent("" + createdBy) + "&"; 
        if (taskId !== undefined)
            url_ += "TaskId=" + encodeURIComponent("" + taskId) + "&"; 
        if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
        if (pageIndex === undefined || pageIndex === null)
            throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
        else
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTaskViewData(_response);
        });
    }

    protected processGetTaskViewData(response: Response): Promise<TaskPaginationModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TaskPaginationModel.fromJS(resultData200) : new TaskPaginationModel();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TaskPaginationModel>(<any>null);
    }

    /**
     * @param taskId (optional) 
     * @return Success
     */
    deleteTaskById(taskId: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Task/DeleteTask?";
        if (taskId !== undefined)
            url_ += "taskId=" + encodeURIComponent("" + taskId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTaskById(_response);
        });
    }

    protected processDeleteTaskById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCompentencies(): Promise<CompetencyMappingJoinModel[]> {
        let url_ = this.baseUrl + "/api/Task/get-all-competencies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllCompentencies(_response);
        });
    }

    protected processGetAllCompentencies(response: Response): Promise<CompetencyMappingJoinModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompetencyMappingJoinModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetencyMappingJoinModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAllModulesForTask(): Promise<ModuleForTaskModel[]> {
        let url_ = this.baseUrl + "/api/Task/get-all-modules";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllModulesForTask(_response);
        });
    }

    protected processGetAllModulesForTask(response: Response): Promise<ModuleForTaskModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ModuleForTaskModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ModuleForTaskModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAllTimePointsForTask(): Promise<TimePointTaskModel[]> {
        let url_ = this.baseUrl + "/api/Task/get-all-points-task";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllTimePointsForTask(_response);
        });
    }

    protected processGetAllTimePointsForTask(response: Response): Promise<TimePointTaskModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimePointTaskModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimePointTaskModel[]>(<any>null);
    }

    /**
     * @param competencyId (optional) 
     * @param moduleId (optional) 
     * @param evaluationTypeId (optional) 
     * @return Success
     */
    getNumber(competencyId: number | null | undefined, moduleId: number | null | undefined, evaluationTypeId: number | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/Task/get-number?";
        if (competencyId !== undefined)
            url_ += "CompetencyId=" + encodeURIComponent("" + competencyId) + "&"; 
        if (moduleId !== undefined)
            url_ += "ModuleId=" + encodeURIComponent("" + moduleId) + "&"; 
        if (evaluationTypeId !== undefined)
            url_ += "EvaluationTypeId=" + encodeURIComponent("" + evaluationTypeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNumber(_response);
        });
    }

    protected processGetNumber(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }
}

export class TaskPaginationModel implements ITaskPaginationModel {
    taskData?: TaskViewModel[] | undefined;
    totalData?: number | undefined;

    constructor(data?: ITaskPaginationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["taskData"] && data["taskData"].constructor === Array) {
                this.taskData = [] as any;
                for (let item of data["taskData"])
                    this.taskData!.push(TaskViewModel.fromJS(item));
            }
            this.totalData = data["totalData"];
        }
    }

    static fromJS(data: any): TaskPaginationModel {
        data = typeof data === 'object' ? data : {};
        let result = new TaskPaginationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.taskData && this.taskData.constructor === Array) {
            data["taskData"] = [];
            for (let item of this.taskData)
                data["taskData"].push(item.toJSON());
        }
        data["totalData"] = this.totalData;
        return data; 
    }
}

export interface ITaskPaginationModel {
    taskData?: TaskViewModel[] | undefined;
    totalData?: number | undefined;
}

export class TaskViewModel implements ITaskViewModel {
    taskCode?: string | undefined;
    questionTypeId?: number | undefined;
    moduleName?: string | undefined;
    createdBy?: string | undefined;
    createdAtDate?: Date | undefined;
    updateAtDate?: Date | undefined;
    updateAt?: string | undefined;
    createdAt?: string | undefined;
    taskId?: number | undefined;

    constructor(data?: ITaskViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.taskCode = data["taskCode"];
            this.questionTypeId = data["questionTypeId"];
            this.moduleName = data["moduleName"];
            this.createdBy = data["createdBy"];
            this.createdAtDate = data["createdAtDate"] ? new Date(data["createdAtDate"].toString()) : <any>undefined;
            this.updateAtDate = data["updateAtDate"] ? new Date(data["updateAtDate"].toString()) : <any>undefined;
            this.updateAt = data["updateAt"];
            this.createdAt = data["createdAt"];
            this.taskId = data["taskId"];
        }
    }

    static fromJS(data: any): TaskViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TaskViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskCode"] = this.taskCode;
        data["questionTypeId"] = this.questionTypeId;
        data["moduleName"] = this.moduleName;
        data["createdBy"] = this.createdBy;
        data["createdAtDate"] = this.createdAtDate ? this.createdAtDate.toISOString() : <any>undefined;
        data["updateAtDate"] = this.updateAtDate ? this.updateAtDate.toISOString() : <any>undefined;
        data["updateAt"] = this.updateAt;
        data["createdAt"] = this.createdAt;
        data["taskId"] = this.taskId;
        return data; 
    }
}

export interface ITaskViewModel {
    taskCode?: string | undefined;
    questionTypeId?: number | undefined;
    moduleName?: string | undefined;
    createdBy?: string | undefined;
    createdAtDate?: Date | undefined;
    updateAtDate?: Date | undefined;
    updateAt?: string | undefined;
    createdAt?: string | undefined;
    taskId?: number | undefined;
}

export class CompetencyMappingJoinModel implements ICompetencyMappingJoinModel {
    competencyId?: number | undefined;
    evaluationTypeId?: number | undefined;
    competencyTypeId?: number | undefined;
    prefixCode?: string | undefined;
    competencyTypeName?: string | undefined;
    evaluationTypeName?: string | undefined;

    constructor(data?: ICompetencyMappingJoinModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.competencyId = data["competencyId"];
            this.evaluationTypeId = data["evaluationTypeId"];
            this.competencyTypeId = data["competencyTypeId"];
            this.prefixCode = data["prefixCode"];
            this.competencyTypeName = data["competencyTypeName"];
            this.evaluationTypeName = data["evaluationTypeName"];
        }
    }

    static fromJS(data: any): CompetencyMappingJoinModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompetencyMappingJoinModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["competencyId"] = this.competencyId;
        data["evaluationTypeId"] = this.evaluationTypeId;
        data["competencyTypeId"] = this.competencyTypeId;
        data["prefixCode"] = this.prefixCode;
        data["competencyTypeName"] = this.competencyTypeName;
        data["evaluationTypeName"] = this.evaluationTypeName;
        return data; 
    }
}

export interface ICompetencyMappingJoinModel {
    competencyId?: number | undefined;
    evaluationTypeId?: number | undefined;
    competencyTypeId?: number | undefined;
    prefixCode?: string | undefined;
    competencyTypeName?: string | undefined;
    evaluationTypeName?: string | undefined;
}

export class ModuleForTaskModel implements IModuleForTaskModel {
    moduleId?: number | undefined;
    moduleName?: string | undefined;

    constructor(data?: IModuleForTaskModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.moduleId = data["moduleId"];
            this.moduleName = data["moduleName"];
        }
    }

    static fromJS(data: any): ModuleForTaskModel {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleForTaskModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["moduleId"] = this.moduleId;
        data["moduleName"] = this.moduleName;
        return data; 
    }
}

export interface IModuleForTaskModel {
    moduleId?: number | undefined;
    moduleName?: string | undefined;
}

export class TimePointTaskModel implements ITimePointTaskModel {
    timePointId?: number | undefined;
    score?: number | undefined;
    points?: number | undefined;

    constructor(data?: ITimePointTaskModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timePointId = data["timePointId"];
            this.score = data["score"];
            this.points = data["points"];
        }
    }

    static fromJS(data: any): TimePointTaskModel {
        data = typeof data === 'object' ? data : {};
        let result = new TimePointTaskModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timePointId"] = this.timePointId;
        data["score"] = this.score;
        data["points"] = this.points;
        return data; 
    }
}

export interface ITimePointTaskModel {
    timePointId?: number | undefined;
    score?: number | undefined;
    points?: number | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}