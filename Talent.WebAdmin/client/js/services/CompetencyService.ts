/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class CompetencyMan {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param competencyName (optional) 
     * @param prefixCode (optional) 
     * @param keyActionCode (optional) 
     * @param sortBy (optional) 
     * @param pageNumber (optional) 
     * @return Success
     */
    getAllJoinCompetencies(startDate: Date | null | undefined, endDate: Date | null | undefined, competencyName: string | null | undefined, prefixCode: string | null | undefined, keyActionCode: string | null | undefined, sortBy: string | null | undefined, pageNumber: number | null | undefined): Promise<CompetencyJoinViewModel> {
        let url_ = this.baseUrl + "/api/v1/competency?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (competencyName !== undefined)
            url_ += "CompetencyName=" + encodeURIComponent("" + competencyName) + "&"; 
        if (prefixCode !== undefined)
            url_ += "PrefixCode=" + encodeURIComponent("" + prefixCode) + "&"; 
        if (keyActionCode !== undefined)
            url_ += "KeyActionCode=" + encodeURIComponent("" + keyActionCode) + "&"; 
        if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
        if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllJoinCompetencies(_response);
        });
    }

    protected processGetAllJoinCompetencies(response: Response): Promise<CompetencyJoinViewModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompetencyJoinViewModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetencyJoinViewModel>(<any>null);
    }

    /**
     * @return Success
     */
    getJoinCompetencyById(id: number): Promise<CompetencyJoinModel> {
        let url_ = this.baseUrl + "/api/v1/competency/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetJoinCompetencyById(_response);
        });
    }

    protected processGetJoinCompetencyById(response: Response): Promise<CompetencyJoinModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompetencyJoinModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetencyJoinModel>(<any>null);
    }

    ///**
    // * @return Success
    // */
    //getAllCompetencies(): Promise<CompetencyJoinViewModel> {
    //    let url_ = this.baseUrl + "/api/v1/competency/all";
    //    url_ = url_.replace(/[?&]$/, "");

    //    let options_ = <RequestInit>{
    //        method: "GET",
    //        headers: {
    //            "Accept": "application/json"
    //        }
    //    };

    //    return this.http.fetch(url_, options_).then((_response: Response) => {
    //        return this.processGetAllCompetencies(_response);
    //    });
    //}

    //protected processGetAllCompetencies(response: Response): Promise<CompetencyJoinViewModel> {
    //    const status = response.status;
    //    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //    if (status === 200) {
    //        return response.text().then((_responseText) => {
    //        let result200: any = null;
    //        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
    //        result200 = CompetencyJoinViewModel.fromJS(resultData200);
    //        return result200;
    //        });
    //    } else if (status !== 200 && status !== 204) {
    //        return response.text().then((_responseText) => {
    //        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //        });
    //    }
    //    return Promise.resolve<CompetencyJoinViewModel>(<any>null);
    //}

    /**
     * @param model (optional) 
     * @return Success
     */
    createCompetency(model: CompetencyFormModel | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/v1/competency/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCompetency(_response);
        });
    }

    protected processCreateCompetency(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    updateCompetency(model: CompetencyFormModel | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/v1/competency/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCompetency(_response);
        });
    }

    protected processUpdateCompetency(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteCompetency(id: number | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/v1/competency/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(id);

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCompetency(_response);
        });
    }

    protected processDeleteCompetency(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCompetencies(): Promise<CompetencyModel[]> {
        let url_ = this.baseUrl + "/api/v1/competency/GetAllCompetenciesAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllCompetencies(_response);
        });
    }

    protected processGetAllCompetencies(response: Response): Promise<CompetencyModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompetencyModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetencyModel[]>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getCompetenciesById(id: number | null | undefined): Promise<CompetencyModel> {
        let url_ = this.baseUrl + "/api/v1/competency/GetCompetenciesByIdAsync?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCompetenciesById(_response);
        });
    }

    protected processGetCompetenciesById(response: Response): Promise<CompetencyModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompetencyModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompetencyModel>(<any>null);
    }
}

export class CompetencyJoinViewModel implements ICompetencyJoinViewModel {
    listCompetencyJoinModel?: CompetencyJoinModel[] | undefined;
    totalItem?: number | undefined;

    constructor(data?: ICompetencyJoinViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listCompetencyJoinModel"])) {
                this.listCompetencyJoinModel = [] as any;
                for (let item of _data["listCompetencyJoinModel"])
                    this.listCompetencyJoinModel!.push(CompetencyJoinModel.fromJS(item));
            }
            this.totalItem = _data["totalItem"];
        }
    }

    static fromJS(data: any): CompetencyJoinViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompetencyJoinViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listCompetencyJoinModel)) {
            data["listCompetencyJoinModel"] = [];
            for (let item of this.listCompetencyJoinModel)
                data["listCompetencyJoinModel"].push(item.toJSON());
        }
        data["totalItem"] = this.totalItem;
        return data; 
    }
}

export interface ICompetencyJoinViewModel {
    listCompetencyJoinModel?: CompetencyJoinModel[] | undefined;
    totalItem?: number | undefined;
}

export class CompetencyJoinModel implements ICompetencyJoinModel {
    competencyId?: number | undefined;
    competencyTypeId?: number | undefined;
    competencyTypeName?: string | undefined;
    keyActionId?: number | undefined;
    keyActionCode?: string | undefined;
    prefixCode?: string | undefined;
    competencyName?: string | undefined;
    competencyDescription?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: ICompetencyJoinModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.competencyId = _data["competencyId"];
            this.competencyTypeId = _data["competencyTypeId"];
            this.competencyTypeName = _data["competencyTypeName"];
            this.keyActionId = _data["keyActionId"];
            this.keyActionCode = _data["keyActionCode"];
            this.prefixCode = _data["prefixCode"];
            this.competencyName = _data["competencyName"];
            this.competencyDescription = _data["competencyDescription"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CompetencyJoinModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompetencyJoinModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["competencyId"] = this.competencyId;
        data["competencyTypeId"] = this.competencyTypeId;
        data["competencyTypeName"] = this.competencyTypeName;
        data["keyActionId"] = this.keyActionId;
        data["keyActionCode"] = this.keyActionCode;
        data["prefixCode"] = this.prefixCode;
        data["competencyName"] = this.competencyName;
        data["competencyDescription"] = this.competencyDescription;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICompetencyJoinModel {
    competencyId?: number | undefined;
    competencyTypeId?: number | undefined;
    competencyTypeName?: string | undefined;
    keyActionId?: number | undefined;
    keyActionCode?: string | undefined;
    prefixCode?: string | undefined;
    competencyName?: string | undefined;
    competencyDescription?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
}

export class CompetencyFormModel implements ICompetencyFormModel {
    competencyId?: number | undefined;
    competencyTypeId?: number | undefined;
    keyActionId?: number | undefined;
    prefixCode!: string;
    competencyName!: string;
    competencyDescription?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: ICompetencyFormModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.competencyId = _data["competencyId"];
            this.competencyTypeId = _data["competencyTypeId"];
            this.keyActionId = _data["keyActionId"];
            this.prefixCode = _data["prefixCode"];
            this.competencyName = _data["competencyName"];
            this.competencyDescription = _data["competencyDescription"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CompetencyFormModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompetencyFormModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["competencyId"] = this.competencyId;
        data["competencyTypeId"] = this.competencyTypeId;
        data["keyActionId"] = this.keyActionId;
        data["prefixCode"] = this.prefixCode;
        data["competencyName"] = this.competencyName;
        data["competencyDescription"] = this.competencyDescription;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICompetencyFormModel {
    competencyId?: number | undefined;
    competencyTypeId?: number | undefined;
    keyActionId?: number | undefined;
    prefixCode: string;
    competencyName: string;
    competencyDescription?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
}

export class CompetencyModel implements ICompetencyModel {
    competencyId?: number | undefined;
    competencyTypeId?: number | undefined;
    keyActionId?: number | undefined;
    prefixCode?: string | undefined;
    competencyName?: string | undefined;
    competencyDescription?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: ICompetencyModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.competencyId = _data["competencyId"];
            this.competencyTypeId = _data["competencyTypeId"];
            this.keyActionId = _data["keyActionId"];
            this.prefixCode = _data["prefixCode"];
            this.competencyName = _data["competencyName"];
            this.competencyDescription = _data["competencyDescription"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CompetencyModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompetencyModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["competencyId"] = this.competencyId;
        data["competencyTypeId"] = this.competencyTypeId;
        data["keyActionId"] = this.keyActionId;
        data["prefixCode"] = this.prefixCode;
        data["competencyName"] = this.competencyName;
        data["competencyDescription"] = this.competencyDescription;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICompetencyModel {
    competencyId?: number | undefined;
    competencyTypeId?: number | undefined;
    keyActionId?: number | undefined;
    prefixCode?: string | undefined;
    competencyName?: string | undefined;
    competencyDescription?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}