// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talent.Entities.Entities;

namespace Talent.Entities.Migrations
{
    [DbContext(typeof(TalentContext))]
    [Migration("20210819020313_ProductGalleries")]
    partial class ProductGalleries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Talent.Entities.Entities.Accommodations", b =>
                {
                    b.Property<int>("AccommodationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Price");

                    b.HasKey("AccommodationId");

                    b.ToTable("Accommodations");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Announcements", b =>
                {
                    b.Property<string>("AnnouncementID")
                        .IsUnicode(false);

                    b.Property<string>("AnnouncementFileID")
                        .IsUnicode(false);

                    b.Property<string>("AnnouncementFileType");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<bool>("Status");

                    b.Property<string>("Title")
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("AnnouncementID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalHistories", b =>
                {
                    b.Property<int>("ApprovalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int>("ApprovalId");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ApprovalStatusId");

                    b.HasKey("ApprovalHistoryId");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("ApprovalStatusId");

                    b.ToTable("ApprovalHistories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalLevels", b =>
                {
                    b.Property<int>("ApprovalLevelId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("ApprovalLevelId");

                    b.ToTable("ApprovalLevels");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalMappings", b =>
                {
                    b.Property<int>("ApprovalMappingid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalLevelId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("PageId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("ApprovalMappingid");

                    b.HasIndex("ApprovalLevelId");

                    b.HasIndex("PageId");

                    b.ToTable("ApprovalMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalPositionMappings", b =>
                {
                    b.Property<int>("PositionId");

                    b.Property<int>("ApprovalLevel");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("PositionId");

                    b.ToTable("ApprovalPositionMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalStatus", b =>
                {
                    b.Property<int>("ApprovalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("ApprovalStatusId");

                    b.ToTable("ApprovalStatus");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToBanners", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("BannerId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("BannerId");

                    b.ToTable("ApprovalToBanners");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToCourses", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("CourseId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("CourseId");

                    b.ToTable("ApprovalToCourses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToEvents", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("EventId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("EventId");

                    b.ToTable("ApprovalToEvents");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToGuides", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("GuideId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("GuideId");

                    b.ToTable("ApprovalToGuides");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToModules", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("ModuleId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ApprovalToModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToNews", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("NewsId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("NewsId");

                    b.ToTable("ApprovalToNews");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToPopQuizzes", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("PopQuizId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("PopQuizId");

                    b.ToTable("ApprovalToPopQuizzes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToSetupCourses", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("CourseId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("CourseId");

                    b.ToTable("ApprovalToSetupCourses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToSetupModules", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("SetupModuleId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("SetupModuleId");

                    b.ToTable("ApprovalToSetupModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToSurveys", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("SurveyId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("SurveyId");

                    b.ToTable("ApprovalToSurveys");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToTasks", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("TaskId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("TaskId");

                    b.ToTable("ApprovalToTasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToTrainings", b =>
                {
                    b.Property<int>("ApprovalId");

                    b.Property<int>("TrainingId");

                    b.HasKey("ApprovalId");

                    b.HasIndex("TrainingId");

                    b.ToTable("ApprovalToTrainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Approvals", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ActionBy")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("ApprovalLevel");

                    b.Property<int?>("ApprovalMappingId");

                    b.Property<int>("ApprovalStatusId");

                    b.Property<string>("ApprovalTo")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("ContentCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ContentName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("ApprovalId");

                    b.HasIndex("ActionBy");

                    b.HasIndex("ApprovalMappingId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("ApprovalTo");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Areas", b =>
                {
                    b.Property<string>("AreaId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("AreaId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Assessments", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("AssessmentId");

                    b.HasIndex("BlobId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Talent.Entities.Entities.AssignedLearnings", b =>
                {
                    b.Property<int>("AssignedLearningId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("SetupModuleId");

                    b.Property<int?>("TrainingId");

                    b.HasKey("AssignedLearningId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("SetupModuleId");

                    b.HasIndex("TrainingId");

                    b.ToTable("AssignedLearnings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.BannerTypes", b =>
                {
                    b.Property<int>("BannerTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("BannerTypeId");

                    b.ToTable("BannerTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Banners", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<int>("BannerTypeId");

                    b.Property<Guid>("BlobId");

                    b.Property<int?>("ContentId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MobilePageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("BannerId");

                    b.HasIndex("BannerTypeId");

                    b.HasIndex("BlobId");

                    b.HasIndex("MobilePageId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Blobs", b =>
                {
                    b.Property<Guid>("BlobId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnName("MIME")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("BlobId");

                    b.ToTable("Blobs");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CalculateLearningQueue", b =>
                {
                    b.Property<Guid>("CalculateLearningQueueId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("EnrollLearningId");

                    b.Property<string>("EnrollType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("FinishedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SetupModuleId");

                    b.HasKey("CalculateLearningQueueId");

                    b.HasIndex("EnrollLearningId");

                    b.HasIndex("SetupModuleId");

                    b.ToTable("CalculateLearningQueue");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Cfams", b =>
                {
                    b.Property<string>("Cfamid")
                        .HasColumnName("CFAMId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Cfamname")
                        .IsRequired()
                        .HasColumnName("CFAMName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Cfamid");

                    b.ToTable("CFAMs");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Cities", b =>
                {
                    b.Property<string>("CityId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ParentCode")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachBookingSchedules", b =>
                {
                    b.Property<int>("CoachBookingScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoachScheduleId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("CoachBookingScheduleId");

                    b.HasIndex("CoachScheduleId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CoachBookingSchedules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachEmployeeMappings", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("TeamId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CoachEmployeeMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachRatings", b =>
                {
                    b.Property<int>("CoachRatingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoachId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RatingScore");

                    b.Property<string>("Review")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<int>("TrainingId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CoachRatingId");

                    b.HasIndex("CoachId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("CoachRatings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachSchedules", b =>
                {
                    b.Property<int>("CoachScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoachId");

                    b.Property<DateTime>("EndDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ScheduleName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Schedule Name')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CoachScheduleId");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachSchedules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachTopicMappings", b =>
                {
                    b.Property<int>("CoachId");

                    b.Property<int>("TopicId");

                    b.HasKey("CoachId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("CoachTopicMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Coaches", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CoachIsActive");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("CoachId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Competencies", b =>
                {
                    b.Property<int>("CompetencyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompetencyDescription")
                        .IsUnicode(false);

                    b.Property<string>("CompetencyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("CompetencyTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PrefixCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("CompetencyId");

                    b.HasIndex("CompetencyTypeId");

                    b.ToTable("Competencies");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CompetencyEvaluationMappings", b =>
                {
                    b.Property<int>("CompetencyId");

                    b.Property<int>("EvaluationTypeId");

                    b.Property<int>("BonusScoreLt50")
                        .HasColumnName("BonusScoreLT50");

                    b.Property<int>("BonusScoreMte50")
                        .HasColumnName("BonusScoreMTE50");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("CompetencyId", "EvaluationTypeId");

                    b.HasIndex("EvaluationTypeId");

                    b.ToTable("CompetencyEvaluationMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CompetencyKeyActionMappings", b =>
                {
                    b.Property<int>("CompetencyId");

                    b.Property<int>("KeyActionId");

                    b.HasKey("CompetencyId", "KeyActionId");

                    b.HasIndex("KeyActionId");

                    b.ToTable("CompetencyKeyActionMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CompetencyTypes", b =>
                {
                    b.Property<int>("CompetencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompetencyTypeName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("CompetencyTypeId");

                    b.ToTable("CompetencyTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CourseCategories", b =>
                {
                    b.Property<int>("CourseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCategoryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("CourseCategoryId");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CourseLearningObjectives", b =>
                {
                    b.Property<int>("LearningObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("LearningObjectiveName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.HasKey("LearningObjectiveId")
                        .HasName("PK_LearningObjectives");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseLearningObjectives");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoursePrerequisiteMappings", b =>
                {
                    b.Property<int>("CoursePrerequisiteMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NextCourseId");

                    b.Property<int?>("NextSetupModuleId");

                    b.Property<int>("PrevCourseId");

                    b.HasKey("CoursePrerequisiteMappingId");

                    b.HasIndex("NextCourseId");

                    b.HasIndex("NextSetupModuleId");

                    b.HasIndex("PrevCourseId");

                    b.ToTable("CoursePrerequisiteMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CourseTrainingTypeMappings", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("TrainingTypeId");

                    b.Property<int?>("MinimumScore");

                    b.Property<int?>("Percentage");

                    b.Property<string>("WorkloadRequirement")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.HasKey("CourseId", "TrainingTypeId");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("CourseTrainingTypeMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Courses", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlobId");

                    b.Property<DateTime?>("CourseApprovedAt");

                    b.Property<int>("CourseCategoryId");

                    b.Property<string>("CourseDescription")
                        .IsUnicode(false);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("CoursePrice");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsPopular");

                    b.Property<bool?>("IsRecommendedForYou");

                    b.Property<int>("LearningTypeId");

                    b.Property<int>("LevelId");

                    b.Property<string>("Others")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("ProgramTypeId");

                    b.Property<DateTime?>("SetupCourseApprovedAt");

                    b.Property<DateTime?>("SetupCourseCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SetupCourseCreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SetupCourseUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SetupCourseUpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("CourseId");

                    b.HasIndex("BlobId");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("LearningTypeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ProgramTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.DealerPeopleCategories", b =>
                {
                    b.Property<string>("DealerPeopleCategoryCode")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("DealerPeopleCategoryCode");

                    b.ToTable("DealerPeopleCategories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Dealers", b =>
                {
                    b.Property<string>("DealerId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool>("OtherCompany");

                    b.HasKey("DealerId");

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("Talent.Entities.Entities.DigitalSignatures", b =>
                {
                    b.Property<int>("DigitalSignatureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("DigitalSignatureId");

                    b.HasIndex("BlobId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DigitalSignatures");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Ebadges", b =>
                {
                    b.Property<int>("EbadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EBadgeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EbadgeName")
                        .IsRequired()
                        .HasColumnName("EBadgeName")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("EbadgeId");

                    b.ToTable("EBadges");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmailTemplates", b =>
                {
                    b.Property<int>("EmailTemplateId");

                    b.Property<string>("Template")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeAccessTimes", b =>
                {
                    b.Property<int>("EmployeeAccessTimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndTime");

                    b.Property<DateTime?>("StartTime");

                    b.HasKey("EmployeeAccessTimeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAccessTimes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeBadges", b =>
                {
                    b.Property<int>("EmployeeTopicMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EbadgeId")
                        .HasColumnName("EBadgeId");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("TopicId");

                    b.HasKey("EmployeeTopicMappingId");

                    b.HasIndex("EbadgeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TopicId");

                    b.ToTable("EmployeeBadges");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeCertificates", b =>
                {
                    b.Property<int>("EmployeeCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BlobId");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("CourseId");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TrainingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("EmployeeCertificateId")
                        .HasName("PK__Employee__38D88A304AE974A1");

                    b.HasIndex("BlobId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCertificates");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeDownload", b =>
                {
                    b.Property<string>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<string>("Category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64);

                    b.Property<string>("RelatedId");

                    b.Property<string>("ThumbnailURL");

                    b.Property<string>("Title");

                    b.Property<string>("URL");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDownload");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeEventMappings", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("EventId");

                    b.Property<bool?>("IsJoined")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsSaved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("JoinedAt");

                    b.Property<DateTime?>("SavedAt");

                    b.HasKey("EmployeeId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EmployeeEventMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeHobbyMappings", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("HobbyId");

                    b.HasKey("EmployeeId", "HobbyId");

                    b.HasIndex("HobbyId");

                    b.ToTable("EmployeeHobbyMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeInterests", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("TopicId");

                    b.HasKey("EmployeeId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("EmployeeInterests");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeLevels", b =>
                {
                    b.Property<int>("EmployeeLevelId");

                    b.Property<int?>("MinValue");

                    b.HasKey("EmployeeLevelId");

                    b.ToTable("EmployeeLevels");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeePointHistories", b =>
                {
                    b.Property<int>("EmployeePointHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("Point");

                    b.Property<int>("PointTransactionTypeId");

                    b.Property<int>("RewardPointTypeId");

                    b.HasKey("EmployeePointHistoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PointTransactionTypeId");

                    b.HasIndex("RewardPointTypeId");

                    b.ToTable("EmployeePointHistories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeePositionMappings", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("PositionId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Information")
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("EmployeeId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("EmployeePositionMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeRewardMappings", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("RewardId");

                    b.Property<DateTime>("RedeemedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("EmployeeId", "RewardId");

                    b.HasIndex("RewardId");

                    b.ToTable("EmployeeRewardMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Employees", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("AccountValid");

                    b.Property<string>("Addresses");

                    b.Property<Guid?>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DealerPeopleCategoryCode")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("EmployeeEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("EmployeeExperience");

                    b.Property<string>("EmployeeMDMCode")
                        .HasMaxLength(64);

                    b.Property<string>("EmployeeMDMUsername")
                        .HasMaxLength(64);

                    b.Property<string>("EmployeeName")
                        .IsUnicode(false);

                    b.Property<string>("EmployeePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsCoach");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRequestUpgrade");

                    b.Property<bool>("IsSuspended");

                    b.Property<bool>("IsTeamLeader");

                    b.Property<string>("Ktp")
                        .HasColumnName("KTP")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastSeenAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastUpdatedPasswordDate");

                    b.Property<int>("LearningPoint");

                    b.Property<string>("ManpowerCode");

                    b.Property<string>("ManpowerStatusType")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("NIP")
                        .HasMaxLength(64);

                    b.Property<string>("Nickname")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("OutletId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PoistionNote");

                    b.Property<string>("Religion");

                    b.Property<string>("Status");

                    b.Property<int>("TeachingPoint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("EmployeeId");

                    b.HasIndex("BlobId");

                    b.HasIndex("DealerPeopleCategoryCode");

                    b.HasIndex("OutletId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EnrollLearningTimes", b =>
                {
                    b.Property<int>("EnrollLearningTimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndTime");

                    b.Property<int?>("EnrollLearningId");

                    b.Property<int>("SetupModuleId");

                    b.Property<DateTime?>("StartTime");

                    b.HasKey("EnrollLearningTimeId");

                    b.HasIndex("EnrollLearningId");

                    b.HasIndex("SetupModuleId");

                    b.ToTable("EnrollLearningTimes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EnrollLearnings", b =>
                {
                    b.Property<int>("EnrollLearningId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDrafted");

                    b.Property<bool>("IsEnrolled");

                    b.Property<bool>("IsJoined");

                    b.Property<bool?>("IsPassed");

                    b.Property<bool>("IsQueued");

                    b.Property<bool>("IsRejected");

                    b.Property<int>("RemedialLevel");

                    b.Property<int?>("SetupModuleId");

                    b.Property<int?>("TrainingId");

                    b.HasKey("EnrollLearningId")
                        .HasName("PK_EnrollLearningId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SetupModuleId");

                    b.HasIndex("TrainingId");

                    b.ToTable("EnrollLearnings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EvaluationTypes", b =>
                {
                    b.Property<int>("EvaluationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EvaluationTypeName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("EvaluationTypeId");

                    b.ToTable("EvaluationTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EventCategories", b =>
                {
                    b.Property<int>("EventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("EventCategoryId");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EventOutletMappings", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<string>("OutletId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("EventId", "OutletId");

                    b.HasIndex("OutletId");

                    b.ToTable("EventOutletMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EventPositionMappings", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("PositionId");

                    b.HasKey("EventId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("EventPositionMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Events", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<Guid?>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<DateTime>("EndDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EventCategoryId");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TotalView")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("EventId");

                    b.HasIndex("BlobId");

                    b.HasIndex("EventCategoryId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Talent.Entities.Entities.FileContentTypes", b =>
                {
                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Mime")
                        .HasColumnName("MIME")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("ContentType", "Mime");

                    b.ToTable("FileContentTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.GuideTypes", b =>
                {
                    b.Property<int>("GuideTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("GuideTypeId");

                    b.ToTable("GuideTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Guides", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<Guid>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("GuideTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("GuideId");

                    b.HasIndex("BlobId");

                    b.HasIndex("GuideTypeId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Hobbies", b =>
                {
                    b.Property<int>("HobbyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("HobbyId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Inboxes", b =>
                {
                    b.Property<int>("InboxId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovalId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDone");

                    b.Property<bool>("IsRead");

                    b.Property<string>("LinkToPage")
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("InboxId");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ItalentReports", b =>
                {
                    b.Property<int>("ItalentReportId")
                        .HasColumnName("ITalentReportId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("ItalentReportId")
                        .HasName("PK_ITalentReportId");

                    b.ToTable("ITalentReports");
                });

            modelBuilder.Entity("Talent.Entities.Entities.KeyActions", b =>
                {
                    b.Property<int>("KeyActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("KeyActionCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("KeyActionDescription")
                        .IsUnicode(false);

                    b.Property<string>("KeyActionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("KeyActionId");

                    b.HasIndex("KeyActionCode")
                        .IsUnique()
                        .HasName("UQ_KeyActions_KeyActionCode");

                    b.ToTable("KeyActions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.LearningHistories", b =>
                {
                    b.Property<int>("LearningHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("PopQuizId");

                    b.Property<int?>("SetupModuleId");

                    b.Property<int?>("TrainingId");

                    b.HasKey("LearningHistoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PopQuizId");

                    b.HasIndex("SetupModuleId");

                    b.HasIndex("TrainingId");

                    b.ToTable("LearningHistories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.LearningTypes", b =>
                {
                    b.Property<int>("LearningTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LearningName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("LearningTypeId");

                    b.ToTable("LearningTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Levels", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("LevelId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Talent.Entities.Entities.MaterialTypes", b =>
                {
                    b.Property<int>("MaterialTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaterialTypeName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("MaterialTypeId");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Menus", b =>
                {
                    b.Property<string>("MenuId")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("MenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Talent.Entities.Entities.MobileInboxTypes", b =>
                {
                    b.Property<int>("MobileInboxTypeId");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("MobileInboxTypeId");

                    b.ToTable("MobileInboxTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.MobileInboxes", b =>
                {
                    b.Property<int>("MobileInboxId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsRead");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("MobileInboxTypeId");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ResignEmployeeId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("RotateTeamMemberId");

                    b.Property<int?>("TeamMemberRequestId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("MobileInboxId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MobileInboxTypeId");

                    b.HasIndex("ResignEmployeeId");

                    b.HasIndex("RotateTeamMemberId");

                    b.HasIndex("TeamMemberRequestId");

                    b.ToTable("MobileInboxes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.MobilePages", b =>
                {
                    b.Property<int>("MobilePageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsForBanner");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.HasKey("MobilePageId");

                    b.ToTable("MobilePages");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ModuleTopicMappings", b =>
                {
                    b.Property<int>("ModuleId");

                    b.Property<int>("TopicId");

                    b.HasKey("ModuleId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("ModuleTopicMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Modules", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<Guid>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("MaterialBlobId");

                    b.Property<bool>("MaterialDownloadable");

                    b.Property<string>("MaterialLink")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<int>("MaterialTypeId");

                    b.Property<string>("ModuleDescription")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("ModuleId");

                    b.HasIndex("BlobId");

                    b.HasIndex("MaterialBlobId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<string>("Author")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<Guid?>("FileBlobId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDownloadable");

                    b.Property<bool>("IsInternal");

                    b.Property<string>("Link")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<int>("NewsCategoryId");

                    b.Property<Guid>("ThumbnailBlobId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("TotalView")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("NewsId");

                    b.HasIndex("FileBlobId");

                    b.HasIndex("NewsCategoryId");

                    b.HasIndex("ThumbnailBlobId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Talent.Entities.Entities.NewsCategories", b =>
                {
                    b.Property<int>("NewsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("NewsCategoryId");

                    b.ToTable("NewsCategories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.OnBoardings", b =>
                {
                    b.Property<string>("OnBoardingID")
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("OnBoardingFileType");

                    b.Property<string>("OnBoardingFileURL")
                        .IsUnicode(false);

                    b.Property<int>("SectionNumber")
                        .IsUnicode(false);

                    b.Property<bool?>("StatusView");

                    b.Property<string>("Title");

                    b.HasKey("OnBoardingID");

                    b.ToTable("OnBoardings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Outlets", b =>
                {
                    b.Property<string>("OutletId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Cfamid")
                        .HasColumnName("CFAMId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("DealerId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsBp")
                        .HasColumnName("IsBP");

                    b.Property<bool>("IsGr")
                        .HasColumnName("IsGR");

                    b.Property<bool>("IsSales");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("OutletCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int?>("RegionId");

                    b.HasKey("OutletId");

                    b.HasIndex("AreaId");

                    b.HasIndex("Cfamid");

                    b.HasIndex("CityId");

                    b.HasIndex("DealerId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Pages", b =>
                {
                    b.Property<string>("PageId")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("MenuId")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("NeedApproval");

                    b.HasKey("PageId");

                    b.HasIndex("MenuId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PointTransactionTypes", b =>
                {
                    b.Property<int>("PointTransactionTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("PointTransactionTypeId");

                    b.ToTable("PointTransactionTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PointTypes", b =>
                {
                    b.Property<int>("PointTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PointTypeName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("PointTypeId");

                    b.ToTable("PointTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PopQuizzes", b =>
                {
                    b.Property<int>("PopQuizId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PopQuizName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("PopQuizId");

                    b.ToTable("PopQuizzes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PositionCompentencyMappings", b =>
                {
                    b.Property<int>("PositionCompentencyMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetencyId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("PositionId");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("ProficiencyLevel");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("PositionCompentencyMappingId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionCompentencyMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Positions", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOtherDealer");

                    b.Property<bool>("IsTamPeople");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("PositionDescription")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PrivilegePageMappings", b =>
                {
                    b.Property<int>("PrivilegePageMappingsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsCreate");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsUpdate");

                    b.Property<string>("PageId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<int>("RoleId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("PrivilegePageMappingsId");

                    b.HasIndex("PageId");

                    b.HasIndex("RoleId");

                    b.ToTable("PrivilegePageMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ProductGalleries", b =>
                {
                    b.Property<Guid>("ProductGalleryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("IsApproved")
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProductGalleryColorCode")
                        .IsUnicode(false);

                    b.Property<string>("ProductGalleryColorName")
                        .IsUnicode(false);

                    b.Property<bool>("ProductGalleryStatus");

                    b.Property<string>("ProductGalleryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("ProductId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("ProductGalleryId");

                    b.HasIndex("BlobId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGalleries");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Products", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsCompetitor");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProductCategory")
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("ProductSegment");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("ProductId");

                    b.HasIndex("BlobId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ProgramTypes", b =>
                {
                    b.Property<int>("ProgramTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProgramTypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("ProgramTypeId");

                    b.ToTable("ProgramTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Provinces", b =>
                {
                    b.Property<string>("ProvinceId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ParentCode")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("ProvinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PushNotificationCategories", b =>
                {
                    b.Property<string>("Guid")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(false);

                    b.HasKey("Guid");

                    b.ToTable("PushNotificationCategories");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PushNotificationRecipients", b =>
                {
                    b.Property<string>("Guid")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(false);

                    b.Property<string>("NotificationId");

                    b.Property<DateTime>("ReadDate");

                    b.Property<string>("RecipientEmployeeId")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(false);

                    b.HasKey("Guid");

                    b.HasIndex("NotificationId");

                    b.HasIndex("RecipientEmployeeId");

                    b.ToTable("PushNotificationRecipients");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PushNotifications", b =>
                {
                    b.Property<string>("Guid")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(false);

                    b.Property<bool>("IsPublished");

                    b.Property<string>("NotificationCategoryId");

                    b.Property<DateTime>("SendDate");

                    b.Property<string>("SenderEmployeeId")
                        .HasMaxLength(64);

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsUnicode(false);

                    b.HasKey("Guid");

                    b.HasIndex("NotificationCategoryId");

                    b.HasIndex("SenderEmployeeId");

                    b.ToTable("PushNotifications");
                });

            modelBuilder.Entity("Talent.Entities.Entities.QuestionTypes", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Regions", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.RewardPointTypes", b =>
                {
                    b.Property<int>("RewardPointTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("RewardPointTypeId");

                    b.ToTable("RewardPointTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.RewardPoints", b =>
                {
                    b.Property<int>("RewardPointId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RewardId");

                    b.Property<int>("RewardPointTypeId");

                    b.Property<int>("Score");

                    b.HasKey("RewardPointId");

                    b.HasIndex("RewardId");

                    b.HasIndex("RewardPointTypeId");

                    b.ToTable("RewardPoints");
                });

            modelBuilder.Entity("Talent.Entities.Entities.RewardTypes", b =>
                {
                    b.Property<int>("RewardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("RewardTypeId");

                    b.ToTable("RewardTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Rewards", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoachId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("EventId");

                    b.Property<string>("HowToUse")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("RewardTypeId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("TermsAndConditions")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("RewardId");

                    b.HasIndex("CoachId");

                    b.HasIndex("EventId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RewardTypeId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("DealerPeopleCategoryCode")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<bool>("IsTamPeople");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("PositionId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.HasIndex("DealerPeopleCategoryCode");

                    b.HasIndex("PositionId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Talent.Entities.Entities.RotateTeamMembers", b =>
                {
                    b.Property<int>("RotateTeamMemberId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatusId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("NextTeamId");

                    b.Property<int>("PreviousTeamId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RotateTeamMemberId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NextTeamId");

                    b.HasIndex("PreviousTeamId");

                    b.ToTable("RotateTeamMembers");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupLearning", b =>
                {
                    b.Property<int>("SetupLearningId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<int?>("CourseId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LearningCategoryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("LearningName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("PopQuizId");

                    b.Property<string>("ProgramTypeName")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("SetupModuleId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SetupLearningId");

                    b.HasIndex("CourseId");

                    b.HasIndex("PopQuizId");

                    b.HasIndex("SetupModuleId");

                    b.ToTable("SetupLearning");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupModules", b =>
                {
                    b.Property<int>("SetupModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<int?>("CourseId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsForRemedial");

                    b.Property<bool>("IsPopular");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsRecommendedForYou");

                    b.Property<int?>("MinimumScore");

                    b.Property<int>("ModuleId");

                    b.Property<int>("TimePointId");

                    b.Property<int?>("TrainingTypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("SetupModuleId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TimePointId");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("SetupModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupTaskCodes", b =>
                {
                    b.Property<int>("SetupTaskId");

                    b.Property<int>("TaskId");

                    b.Property<int>("QuestionNumber");

                    b.HasKey("SetupTaskId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("SetupTaskCodes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupTasks", b =>
                {
                    b.Property<int>("SetupTaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<int?>("CompetencyId");

                    b.Property<bool>("IsGrouping");

                    b.Property<int?>("ModuleId");

                    b.Property<int?>("PopQuizId");

                    b.Property<int?>("QuestionPerParticipant");

                    b.Property<int?>("SetupModuleId");

                    b.Property<int>("TestTime");

                    b.Property<int?>("TotalParticipant");

                    b.Property<int?>("TotalQuestion");

                    b.HasKey("SetupTaskId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PopQuizId");

                    b.HasIndex("SetupModuleId");

                    b.ToTable("SetupTasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingActualOrganizationStructure", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("ChangeTrackingMask");

                    b.Property<decimal?>("Chief")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<decimal?>("DepthLevel")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("EmployeeGroup")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeGroupText")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeSubgroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeSubgroupText")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EnterDateTime");

                    b.Property<string>("EnterUserName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("EnterVersionNumber");

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("JobCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("JobName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastChgDateTime");

                    b.Property<string>("LastChgUserName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("LastChgVersionNumber");

                    b.Property<Guid?>("Muid")
                        .HasColumnName("MUID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("NoReg")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ObjectDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrgCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal?>("OrgLevel")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("OrgName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ParentOrgCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Period");

                    b.Property<string>("PersonalArea")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PersonalSubarea")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PostName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Service")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Staffing")
                        .HasColumnType("decimal(38, 2)");

                    b.Property<string>("State")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Structure")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<decimal?>("Vacant")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("ValidationStatus")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("VersionFlag")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("VersionId")
                        .HasColumnName("Version_ID");

                    b.Property<string>("VersionName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("VersionNumber");

                    b.Property<string>("WorkContract")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("WorkContractText")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Code");

                    b.ToTable("StagingActualOrganizationStructure");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingAfterSalesArea", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code")
                        .HasName("PK__StagingA__A25C5AA63B389B6B");

                    b.ToTable("StagingAfterSalesArea");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingDealerCompany", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal?>("DealerGroupId")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code")
                        .HasName("PK__StagingD__A25C5AA60D6ECC5A");

                    b.ToTable("StagingDealerCompany");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingDealerEmployee", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Ktp")
                        .HasColumnName("KTP")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("LastManpowerPositionTypeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ManpowerStatusTypeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ManpowerTypeId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal?>("OutletId")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("Phone")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Sex")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code")
                        .HasName("PK__StagingD__A25C5AA63850C09D");

                    b.ToTable("StagingDealerEmployee");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingDealerGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DealerGroupCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code")
                        .HasName("PK__StagingD__A25C5AA6992F47B1");

                    b.ToTable("StagingDealerGroup");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingManpowerPositionType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code")
                        .HasName("PK__StagingM__A25C5AA6F362A55F");

                    b.ToTable("StagingManpowerPositionType");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingManpowerType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code");

                    b.ToTable("StagingManpowerType");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingOrganizationObject", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("ObjectDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ObjectId")
                        .HasColumnName("ObjectID")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ObjectText")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("ObjectType")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code");

                    b.ToTable("StagingOrganizationObject");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingOutlet", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal?>("DealerCompanyId")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<decimal?>("KabupatenId")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("OutletCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("OutletFunctionId")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<decimal>("RegionCode")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal?>("TamAreaAfterSalesId")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<decimal?>("TamAreaId")
                        .HasColumnType("decimal(38, 0)");

                    b.HasKey("Code")
                        .HasName("PK__StagingO__A25C5AA6DBBC51C9");

                    b.ToTable("StagingOutlet");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingRegion", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal?>("ParentCode")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("RegionType")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code")
                        .HasName("PK__StagingR__A25C5AA6E838ACC4");

                    b.ToTable("StagingRegion");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingSalesArea", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code")
                        .HasName("PK__StagingS__A25C5AA66C62D791");

                    b.ToTable("StagingSalesArea");
                });

            modelBuilder.Entity("Talent.Entities.Entities.StagingUser", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("NoReg")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Code");

                    b.ToTable("StagingUser");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyAnswerDetails", b =>
                {
                    b.Property<int>("SurveyAnswerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<Guid?>("BlobId");

                    b.Property<int>("SurveyAnswerId");

                    b.Property<int>("SurveyQuestionId");

                    b.HasKey("SurveyAnswerDetailId");

                    b.HasIndex("BlobId");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyAnswerDetails");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyAnswers", b =>
                {
                    b.Property<int>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("SurveyId");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyChoices", b =>
                {
                    b.Property<int>("SurveyChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BlobId");

                    b.Property<string>("Choice")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<int>("SurveyQuestionId");

                    b.HasKey("SurveyChoiceId");

                    b.HasIndex("BlobId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyMatchingChoices", b =>
                {
                    b.Property<int>("SurveyMatchingChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BlobId");

                    b.Property<string>("SurveyMatchingChoiceCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("SurveyQuestionId");

                    b.Property<string>("Text")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("SurveyMatchingChoiceId");

                    b.HasIndex("BlobId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyMatchingChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyMatrixChoices", b =>
                {
                    b.Property<int>("SurveyMatrixChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number");

                    b.Property<int?>("SurveyQuestionId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("SurveyMatrixChoiceId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyMatrixChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyMatrixQuestions", b =>
                {
                    b.Property<int>("SurveyMatrixQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Number");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("SurveyQuestionId");

                    b.HasKey("SurveyMatrixQuestionId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyMatrixQuestions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyOutletMappings", b =>
                {
                    b.Property<int>("SurveyId");

                    b.Property<string>("OutletId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("SurveyId", "OutletId");

                    b.HasIndex("OutletId");

                    b.ToTable("SurveyOutletMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyPositionMappings", b =>
                {
                    b.Property<int>("SurveyId");

                    b.Property<int>("PositionId");

                    b.HasKey("SurveyId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("SurveyPositionMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyQuestionTypes", b =>
                {
                    b.Property<int>("SurveyQuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("SurveyQuestionTypeId");

                    b.ToTable("SurveyQuestionTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyQuestions", b =>
                {
                    b.Property<int>("SurveyQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BlobId");

                    b.Property<string>("Question")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<int>("QuestionNumber");

                    b.Property<int>("SurveyId");

                    b.Property<int>("SurveyQuestionTypeId");

                    b.HasKey("SurveyQuestionId");

                    b.HasIndex("BlobId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyQuestionTypeId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveySpecialAnswers", b =>
                {
                    b.Property<int>("SurveySpecialAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsUnicode(false);

                    b.Property<int?>("Number");

                    b.Property<int?>("SurveyAnswerDetailId");

                    b.HasKey("SurveySpecialAnswerId");

                    b.HasIndex("SurveyAnswerDetailId");

                    b.ToTable("SurveySpecialAnswers");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Surveys", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("SurveyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TamemployeeStructure", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal?>("Chief")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<decimal?>("DepthLevel")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("EmployeeGroup")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeGroupText")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeSubgroup")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeSubgroupText")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("JobCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("JobName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastChgDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("NoReg")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("OrgCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal?>("OrgLevel")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("OrgName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ParentOrgCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Period");

                    b.Property<string>("PersonalArea")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PersonalSubarea")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PostName")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<decimal?>("Staffing")
                        .HasColumnType("decimal(38, 2)");

                    b.Property<string>("State")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Structure")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("TalentLevel");

                    b.Property<decimal?>("Vacant")
                        .HasColumnType("decimal(38, 0)");

                    b.Property<string>("WorkContract")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("WorkContractText")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Code");

                    b.ToTable("TAMEmployeeStructure");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskAnswerDetails", b =>
                {
                    b.Property<int>("TaskAnswerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsUnicode(false);

                    b.Property<Guid?>("AnswerBlobId");

                    b.Property<bool>("IsChecked")
                        .HasColumnName("isChecked");

                    b.Property<bool>("IsTrue")
                        .HasColumnName("isTrue");

                    b.Property<int?>("Point");

                    b.Property<int?>("Score");

                    b.Property<int>("TaskAnswerId");

                    b.Property<int>("TaskId");

                    b.HasKey("TaskAnswerDetailId");

                    b.HasIndex("AnswerBlobId");

                    b.HasIndex("TaskAnswerId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAnswerDetails");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskAnswers", b =>
                {
                    b.Property<int>("TaskAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("PopQuizId");

                    b.Property<int?>("SetupModuleId");

                    b.Property<int?>("TrainingId");

                    b.HasKey("TaskAnswerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PopQuizId");

                    b.HasIndex("SetupModuleId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TaskAnswers");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskChecklistChoices", b =>
                {
                    b.Property<int>("TaskChecklistChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAnswer");

                    b.Property<int>("Number");

                    b.Property<int>("Score");

                    b.Property<int>("TaskId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("TaskChecklistChoiceId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskChecklistChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskChecklistTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.ToTable("TaskChecklistTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskEssayTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.ToTable("TaskEssayTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskFileUploadTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.ToTable("TaskFileUploadTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskHotSpotAnswers", b =>
                {
                    b.Property<int>("TaskHotSpotAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<int>("Number");

                    b.Property<int>("Score");

                    b.Property<int>("TaskId");

                    b.HasKey("TaskHotSpotAnswerId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHotSpotAnswers");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskHotSpotTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<Guid>("BlobId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.HasIndex("BlobId");

                    b.ToTable("TaskHotSpotTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatchingChoices", b =>
                {
                    b.Property<int>("TaskMatchingChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BlobId");

                    b.Property<int>("TaskId");

                    b.Property<string>("TaskMatchingChoiceCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("TaskMatchingChoiceId");

                    b.HasIndex("BlobId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskMatchingChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatchingTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("Score");

                    b.HasKey("TaskId");

                    b.ToTable("TaskMatchingTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatrixChoices", b =>
                {
                    b.Property<int>("TaskMatrixChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TaskId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("TaskMatrixChoiceId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskMatrixChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatrixQuestions", b =>
                {
                    b.Property<int>("TaskMatrixQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Number");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("TaskId");

                    b.HasKey("TaskMatrixQuestionId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskMatrixQuestions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatrixTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("ScoreColumn1");

                    b.Property<int>("ScoreColumn2");

                    b.Property<int>("ScoreColumn3");

                    b.Property<int>("ScoreColumn4");

                    b.Property<int>("ScoreColumn5");

                    b.HasKey("TaskId");

                    b.ToTable("TaskMatrixTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMultipleChoiceChoices", b =>
                {
                    b.Property<int>("TaskMultipleChoiceChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number");

                    b.Property<int>("TaskId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("TaskMultipleChoiceChoiceId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskMultipleChoiceChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMultipleChoiceTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<int>("AnswerId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("Score");

                    b.HasKey("TaskId");

                    b.ToTable("TaskMultipleChoiceTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskRatingChoices", b =>
                {
                    b.Property<int>("TaskRatingChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number");

                    b.Property<int>("TaskId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("TaskRatingChoiceId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskRatingChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskRatingTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("Score0To20");

                    b.Property<int>("Score21To40");

                    b.Property<int>("Score41To60");

                    b.Property<int>("Score61To80");

                    b.Property<int>("Score81To100");

                    b.HasKey("TaskId");

                    b.ToTable("TaskRatingTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskSequenceChoices", b =>
                {
                    b.Property<int>("TaskSequenceChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number");

                    b.Property<int>("Score");

                    b.Property<int>("TaskId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("TaskSequenceChoiceId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskSequenceChoices");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskSequenceTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.ToTable("TaskSequenceTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskShortAnswerTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.ToTable("TaskShortAnswerTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskSpecialAnswers", b =>
                {
                    b.Property<int>("TaskSpecialAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsUnicode(false);

                    b.Property<bool?>("IsTrue")
                        .HasColumnName("isTrue");

                    b.Property<int?>("Number");

                    b.Property<int?>("Point");

                    b.Property<int?>("Score");

                    b.Property<int?>("TaskAnswerDetailId");

                    b.HasKey("TaskSpecialAnswerId");

                    b.HasIndex("TaskAnswerDetailId");

                    b.ToTable("TaskSpecialAnswers");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskTebakGambarPictures", b =>
                {
                    b.Property<int>("TaskTebakGambarId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlobId");

                    b.Property<int>("Number");

                    b.Property<int>("TaskId");

                    b.HasKey("TaskTebakGambarId");

                    b.HasIndex("BlobId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskTebakGambarPictures");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskTebakGambarTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<int>("Answer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("Score");

                    b.HasKey("TaskId");

                    b.ToTable("TaskTebakGambarTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskTrueFalseTypes", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<bool>("Answer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("Score");

                    b.HasKey("TaskId");

                    b.ToTable("TaskTrueFalseTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<Guid?>("BlobId");

                    b.Property<int>("CompetencyId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("EvaluationTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LayoutType");

                    b.Property<int>("ModuleId");

                    b.Property<int>("QuestionTypeId");

                    b.Property<string>("StoryLineDescription")
                        .IsUnicode(false);

                    b.Property<int>("TaskNumber");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TaskId");

                    b.HasIndex("BlobId");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("EvaluationTypeId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TeamDetails", b =>
                {
                    b.Property<int>("TeamDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("TeamId");

                    b.HasKey("TeamDetailId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamDetails");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TeamMemberRequests", b =>
                {
                    b.Property<int>("TeamMemberRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatusId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("TeamId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TeamMemberRequestId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMemberRequests");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Teams", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TeamLeaderId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TeamId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TimePoints", b =>
                {
                    b.Property<int>("TimePointId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PointTypeId");

                    b.Property<int>("Points");

                    b.Property<int?>("Score");

                    b.Property<int?>("Time");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TimePointId");

                    b.HasIndex("PointTypeId");

                    b.ToTable("TimePoints");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Topics", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BlobId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int?>("EbadgeId")
                        .HasColumnName("EBadgeId");

                    b.Property<string>("TopicDescription")
                        .IsUnicode(false);

                    b.Property<int>("TopicMinimumPoints");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TopicId");

                    b.HasIndex("BlobId");

                    b.HasIndex("EbadgeId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingInvitations", b =>
                {
                    b.Property<int>("TrainingInvitationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatusId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("TrainingId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TrainingInvitationId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingInvitations");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingModuleMappings", b =>
                {
                    b.Property<int>("TrainingModuleMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoachId");

                    b.Property<int>("SetupModuleId");

                    b.Property<int?>("TimePointId");

                    b.Property<DateTime?>("TrainingEnd");

                    b.Property<int>("TrainingId");

                    b.Property<DateTime?>("TrainingStart");

                    b.HasKey("TrainingModuleMappingId");

                    b.HasIndex("CoachId");

                    b.HasIndex("SetupModuleId");

                    b.HasIndex("TimePointId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingModuleMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingOutletMappings", b =>
                {
                    b.Property<int>("TrainingId");

                    b.Property<string>("OutletId")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TrainingId", "OutletId");

                    b.HasIndex("OutletId");

                    b.ToTable("TrainingOutletMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingPositionMappings", b =>
                {
                    b.Property<int>("TrainingId");

                    b.Property<int>("PositionId");

                    b.HasKey("TrainingId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("TrainingPositionMappings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingProcesses", b =>
                {
                    b.Property<int>("TrainingProcessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccomodationId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateofStayEnd");

                    b.Property<DateTime?>("DateofStayStart");

                    b.Property<bool>("IsConfirmed");

                    b.Property<int>("TrainingInvitationId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TrainingProcessId");

                    b.HasIndex("AccomodationId");

                    b.HasIndex("TrainingInvitationId");

                    b.ToTable("TrainingProcesses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingRatings", b =>
                {
                    b.Property<int>("TrainingRatingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RatingScore");

                    b.Property<string>("Review")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<int>("TrainingId");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TrainingRatingId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingRatings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingServiceLevels", b =>
                {
                    b.Property<int>("TrainingServiceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvanceLevel");

                    b.Property<int>("BasicLevel");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<int>("FundamentalLevel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TrainingServiceLevelId");

                    b.ToTable("TrainingServiceLevels");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingTypes", b =>
                {
                    b.Property<int>("TrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TrainingTypeName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("TrainingTypeId");

                    b.ToTable("TrainingTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Trainings", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<int>("Batch");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsAccommodate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsParticipantPermanent");

                    b.Property<bool>("IsParticipantTrainee");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("Quota");

                    b.Property<DateTime?>("RescheduledAt");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Top5Course");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('SYSTEM')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("TrainingId");

                    b.HasIndex("CourseId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.UpgradeAccountApprovals", b =>
                {
                    b.Property<string>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<DateTime>("ApprovalDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ApprovedBy");

                    b.Property<DateTime>("ApprovedDate");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UpgradeAccountApprovals");
                });

            modelBuilder.Entity("Talent.Entities.Entities.UserFcmTokens", b =>
                {
                    b.Property<string>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64);

                    b.Property<string>("Token");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserFcmTokens");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalHistories", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithMany("ApprovalHistories")
                        .HasForeignKey("ApprovalId")
                        .HasConstraintName("FK_ApprovalHistories_Approvals");

                    b.HasOne("Talent.Entities.Entities.ApprovalStatus", "ApprovalStatusNavigation")
                        .WithMany("ApprovalHistories")
                        .HasForeignKey("ApprovalStatusId")
                        .HasConstraintName("FK_ApprovalHistories_ApprovalStatus");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.ApprovalLevels", "ApprovalLevel")
                        .WithMany("ApprovalMappings")
                        .HasForeignKey("ApprovalLevelId")
                        .HasConstraintName("FK_ApprovalMappings_ApprovalLevels");

                    b.HasOne("Talent.Entities.Entities.Pages", "Page")
                        .WithMany("ApprovalMappings")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_ApprovalMappings_Pages");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalPositionMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Positions", "Position")
                        .WithOne("ApprovalPositionMappings")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalPositionMappings", "PositionId")
                        .HasConstraintName("FK_ApprovalPositionMappings_Positions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToBanners", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToBanners")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToBanners", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToBanners_Approvals");

                    b.HasOne("Talent.Entities.Entities.Banners", "Banner")
                        .WithMany("ApprovalToBanners")
                        .HasForeignKey("BannerId")
                        .HasConstraintName("FK_ApprovalToBanners_Banners");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToCourses", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToCourses")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToCourses", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToCourses_Approvals");

                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("ApprovalToCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_ApprovalToCourses_Courses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToEvents", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToEvents")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToEvents", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToEvents_Approvals");

                    b.HasOne("Talent.Entities.Entities.Events", "Event")
                        .WithMany("ApprovalToEvents")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_ApprovalToEvents_Events");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToGuides", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToGuides")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToGuides", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToGuides_Approvals");

                    b.HasOne("Talent.Entities.Entities.Guides", "Guide")
                        .WithMany("ApprovalToGuides")
                        .HasForeignKey("GuideId")
                        .HasConstraintName("FK_ApprovalToGuides_Guides");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToModules", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToModules")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToModules", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToModules_Approvals");

                    b.HasOne("Talent.Entities.Entities.Modules", "Module")
                        .WithMany("ApprovalToModules")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_ApprovalToModules_Modules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToNews", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToNews")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToNews", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToNews_Approvals");

                    b.HasOne("Talent.Entities.Entities.News", "News")
                        .WithMany("ApprovalToNews")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_ApprovalToNews_News");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToPopQuizzes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToPopQuizzes")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToPopQuizzes", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToSetupTasks_Approvals");

                    b.HasOne("Talent.Entities.Entities.PopQuizzes", "PopQuiz")
                        .WithMany("ApprovalToPopQuizzes")
                        .HasForeignKey("PopQuizId")
                        .HasConstraintName("FK_ApprovalToPopQuizzes_PopQuizzes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToSetupCourses", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToSetupCourses")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToSetupCourses", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToSetupCourses_Approvals");

                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("ApprovalToSetupCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_ApprovalToSetupCourses_Courses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToSetupModules", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToSetupModules")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToSetupModules", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToSetupModules_Approvals");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("ApprovalToSetupModules")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_ApprovalToSetupModules_SetupModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToSurveys", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToSurveys")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToSurveys", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToSurveys_Approvals");

                    b.HasOne("Talent.Entities.Entities.Surveys", "Survey")
                        .WithMany("ApprovalToSurveys")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_ApprovalToSurveys_Surveys");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToTasks", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToTasks")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToTasks", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToTasks_Approvals");

                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("ApprovalToTasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_ApprovalToTasks_Tasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ApprovalToTrainings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithOne("ApprovalToTrainings")
                        .HasForeignKey("Talent.Entities.Entities.ApprovalToTrainings", "ApprovalId")
                        .HasConstraintName("FK_ApprovalToTrainings_Approvals");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("ApprovalToTrainings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_ApprovalToTrainings_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Approvals", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "ActionByNavigation")
                        .WithMany("ApprovalsActionByNavigation")
                        .HasForeignKey("ActionBy")
                        .HasConstraintName("FK_Approvals_ActionBy");

                    b.HasOne("Talent.Entities.Entities.ApprovalMappings", "ApprovalMapping")
                        .WithMany("Approvals")
                        .HasForeignKey("ApprovalMappingId")
                        .HasConstraintName("FK_Approvals_ApprovalMappings");

                    b.HasOne("Talent.Entities.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("Approvals")
                        .HasForeignKey("ApprovalStatusId")
                        .HasConstraintName("FK_Approvals_ApprovalStatus");

                    b.HasOne("Talent.Entities.Entities.Employees", "ApprovalToNavigation")
                        .WithMany("ApprovalsApprovalToNavigation")
                        .HasForeignKey("ApprovalTo")
                        .HasConstraintName("FK_Approvals_ApprovalTo");

                    b.HasOne("Talent.Entities.Entities.Employees", "CreatedByNavigation")
                        .WithMany("ApprovalsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Approvals_CreatedBy");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Assessments", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Assessments")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Assessments_Blobs");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("Assessments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Assessments_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.AssignedLearnings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "AssignedByNavigation")
                        .WithMany("AssignedLearningsAssignedByNavigation")
                        .HasForeignKey("AssignedBy")
                        .HasConstraintName("FK_AssignedLearnings_AssignedBy");

                    b.HasOne("Talent.Entities.Entities.Employees", "AssignedToNavigation")
                        .WithMany("AssignedLearningsAssignedToNavigation")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK_AssignedLearnings_AssignedTo");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("AssignedLearnings")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_AssignedLearnings_SetupModules");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("AssignedLearnings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_AssignedLearnings_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Banners", b =>
                {
                    b.HasOne("Talent.Entities.Entities.BannerTypes", "BannerType")
                        .WithMany("Banners")
                        .HasForeignKey("BannerTypeId")
                        .HasConstraintName("FK_Banners_BannerTypes");

                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Banners")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Banners_Blobs");

                    b.HasOne("Talent.Entities.Entities.MobilePages", "MobilePage")
                        .WithMany("Banners")
                        .HasForeignKey("MobilePageId")
                        .HasConstraintName("FK_Banners_MobilePages");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CalculateLearningQueue", b =>
                {
                    b.HasOne("Talent.Entities.Entities.EnrollLearnings", "EnrollLearning")
                        .WithMany("CalculateLearningQueue")
                        .HasForeignKey("EnrollLearningId")
                        .HasConstraintName("FK_CalculateLearningQueue_EnrollLearning")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("CalculateLearningQueue")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_CalculateLearningQueue_SetupModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachBookingSchedules", b =>
                {
                    b.HasOne("Talent.Entities.Entities.CoachSchedules", "CoachSchedule")
                        .WithMany("CoachBookingSchedules")
                        .HasForeignKey("CoachScheduleId")
                        .HasConstraintName("FK_CoachBookingSchedules_CoachSchedules")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("CoachBookingSchedules")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_CoachBookingSchedules_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachEmployeeMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Coaches", "Employee")
                        .WithMany("CoachEmployeeMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_CoachEmployeeMappings_Coaches");

                    b.HasOne("Talent.Entities.Entities.Teams", "Team")
                        .WithMany("CoachEmployeeMappings")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_CoachEmployeeMappings_Teams")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachRatings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Coaches", "Coach")
                        .WithMany("CoachRatings")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_CoachRatings_Coaches");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("CoachRatings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_CoachRatings_Employees");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("CoachRatings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_CoachRatings_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachSchedules", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Coaches", "Coach")
                        .WithMany("CoachSchedules")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_CoachSchedules_Coaches")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoachTopicMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Coaches", "Coach")
                        .WithMany("CoachTopicMappings")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_CoachTopicMappings_Coaches")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Topics", "Topic")
                        .WithMany("CoachTopicMappings")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_CoachTopicMappings_Topics")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.Coaches", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("Coaches")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Coaches_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Competencies", b =>
                {
                    b.HasOne("Talent.Entities.Entities.CompetencyTypes", "CompetencyType")
                        .WithMany("Competencies")
                        .HasForeignKey("CompetencyTypeId")
                        .HasConstraintName("FK_Competencies_CompetencyTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.CompetencyEvaluationMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Competencies", "Competency")
                        .WithMany("CompetencyEvaluationMappings")
                        .HasForeignKey("CompetencyId")
                        .HasConstraintName("FK_CompetencyEvaluationMappings_Competencies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.EvaluationTypes", "EvaluationType")
                        .WithMany("CompetencyEvaluationMappings")
                        .HasForeignKey("EvaluationTypeId")
                        .HasConstraintName("FK_CompetencyEvaluationMappings_EvaluationTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.CompetencyKeyActionMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Competencies", "Competency")
                        .WithMany("CompetencyKeyActionMappings")
                        .HasForeignKey("CompetencyId")
                        .HasConstraintName("FK_CompetencyKeyActionMappings_Competencies");

                    b.HasOne("Talent.Entities.Entities.KeyActions", "KeyAction")
                        .WithMany("CompetencyKeyActionMappings")
                        .HasForeignKey("KeyActionId")
                        .HasConstraintName("FK_CompetencyKeyActionMappings_KeyActions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CourseLearningObjectives", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("CourseLearningObjectives")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseLearningObjectives_Courses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CoursePrerequisiteMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Courses", "NextCourse")
                        .WithMany("CoursePrerequisiteMappingsNextCourse")
                        .HasForeignKey("NextCourseId")
                        .HasConstraintName("FK_CoursePrerequisiteMappings_NextCourses");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "NextSetupModule")
                        .WithMany("CoursePrerequisiteMappings")
                        .HasForeignKey("NextSetupModuleId")
                        .HasConstraintName("FK_CoursePrerequisiteMappings_NextSetupModules");

                    b.HasOne("Talent.Entities.Entities.Courses", "PrevCourse")
                        .WithMany("CoursePrerequisiteMappingsPrevCourse")
                        .HasForeignKey("PrevCourseId")
                        .HasConstraintName("FK_CoursePrerequisiteMappings_PrevCourses");
                });

            modelBuilder.Entity("Talent.Entities.Entities.CourseTrainingTypeMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("CourseTrainingTypeMappings")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseTrainingTypeMappings_Courses");

                    b.HasOne("Talent.Entities.Entities.TrainingTypes", "TrainingType")
                        .WithMany("CourseTrainingTypeMappings")
                        .HasForeignKey("TrainingTypeId")
                        .HasConstraintName("FK_CourseTrainingTypeMappings_TrainingTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Courses", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Courses")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Courses_Blobs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.CourseCategories", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryId")
                        .HasConstraintName("FK_Courses_CourseCategories")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.LearningTypes", "LearningType")
                        .WithMany("Courses")
                        .HasForeignKey("LearningTypeId")
                        .HasConstraintName("FK_Courses_LearningTypes")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Levels", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_Courses_Levels")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.ProgramTypes", "ProgramType")
                        .WithMany("Courses")
                        .HasForeignKey("ProgramTypeId")
                        .HasConstraintName("FK_Courses_ProgramTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.DigitalSignatures", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_DigitalSignatures_Blobs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_DigitalSignatures_Employees")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeAccessTimes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeAccessTimes")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeAccessTimes_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeBadges", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Ebadges", "Ebadge")
                        .WithMany("EmployeeBadges")
                        .HasForeignKey("EbadgeId")
                        .HasConstraintName("FK_EmployeeBadges_EBadges");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeBadges")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeBadges_Employees");

                    b.HasOne("Talent.Entities.Entities.Topics", "Topic")
                        .WithMany("EmployeeBadges")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_EmployeeBadges_Topics");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeCertificates", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_EmployeeCertificates_Blobs");

                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_EmployeeCertificates_CourseId");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeCertificates_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeDownload", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeDownloads")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_User_Downloads");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeEventMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeEventMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeEventMappings_Employees");

                    b.HasOne("Talent.Entities.Entities.Events", "Event")
                        .WithMany("EmployeeEventMappings")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EmployeeEventMappings_Events");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeHobbyMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeHobbyMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeHobbyMappings_Employees");

                    b.HasOne("Talent.Entities.Entities.Hobbies", "Hobby")
                        .WithMany("EmployeeHobbyMappings")
                        .HasForeignKey("HobbyId")
                        .HasConstraintName("FK_EmployeeHobbyMappings_Hobbies");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeInterests", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeInterests")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeInterests_Employees");

                    b.HasOne("Talent.Entities.Entities.Topics", "Topic")
                        .WithMany("EmployeeInterests")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_EmployeeInterests_Topics");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeePointHistories", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeePointHistories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeePointHistories_Employees");

                    b.HasOne("Talent.Entities.Entities.PointTransactionTypes", "PointTransactionType")
                        .WithMany("EmployeePointHistories")
                        .HasForeignKey("PointTransactionTypeId")
                        .HasConstraintName("FK_EmployeePointHistories_PointTransactionTypes");

                    b.HasOne("Talent.Entities.Entities.RewardPointTypes", "RewardPointType")
                        .WithMany("EmployeePointHistories")
                        .HasForeignKey("RewardPointTypeId")
                        .HasConstraintName("FK_EmployeePointHistories_RewardPointTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeePositionMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeePositionMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeePositionMappings_Employees")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Positions", "Position")
                        .WithMany("EmployeePositionMappings")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_EmployeePositionMappings_Positions")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.EmployeeRewardMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EmployeeRewardMappings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeRewardMappings_Employees");

                    b.HasOne("Talent.Entities.Entities.Rewards", "Reward")
                        .WithMany("EmployeeRewardMappings")
                        .HasForeignKey("RewardId")
                        .HasConstraintName("FK_EmployeeRewardMappings_Rewards");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Employees", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Employees")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Employees_Blobs");

                    b.HasOne("Talent.Entities.Entities.DealerPeopleCategories", "DealerPeopleCategoryCodeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("DealerPeopleCategoryCode")
                        .HasConstraintName("FK_Employees_DealerPeopleCategories");

                    b.HasOne("Talent.Entities.Entities.Outlets", "Outlet")
                        .WithMany("Employees")
                        .HasForeignKey("OutletId")
                        .HasConstraintName("FK_Employees_Outlets")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.EnrollLearningTimes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.EnrollLearnings", "EnrollLearning")
                        .WithMany("EnrollLearningTimes")
                        .HasForeignKey("EnrollLearningId")
                        .HasConstraintName("FK_EnrollLearningTimes_EnrollLearnings");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("EnrollLearningTimes")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_EnrollLearningTimes_SetupModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EnrollLearnings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("EnrollLearnings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EnrollLearnings_Employees");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("EnrollLearnings")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_EnrollLearnings_SetupModules");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("EnrollLearnings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_EnrollLearnings_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.EventOutletMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Events", "Event")
                        .WithMany("EventOutletMappings")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventOutletMappings_Events")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Outlets", "Outlet")
                        .WithMany("EventOutletMappings")
                        .HasForeignKey("OutletId")
                        .HasConstraintName("FK_EventOutletMappings_Outlets")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.EventPositionMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Events", "Event")
                        .WithMany("EventPositionMappings")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventPositionMappings_Events")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Positions", "Position")
                        .WithMany("EventPositionMappings")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_EventPositionMappings_Positions")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.Events", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Events")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Events_Blobs");

                    b.HasOne("Talent.Entities.Entities.EventCategories", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .HasConstraintName("FK_Events_EventCategories")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.Guides", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Guides")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Guides_Blobs");

                    b.HasOne("Talent.Entities.Entities.GuideTypes", "GuideType")
                        .WithMany("Guides")
                        .HasForeignKey("GuideTypeId")
                        .HasConstraintName("FK_Guides_GuideTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Inboxes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Approvals", "Approval")
                        .WithMany("Inboxes")
                        .HasForeignKey("ApprovalId")
                        .HasConstraintName("FK_Inboxes_Approvals");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("Inboxes")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Inboxes_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.LearningHistories", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("LearningHistories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_LearningHistories_Employees");

                    b.HasOne("Talent.Entities.Entities.PopQuizzes", "PopQuiz")
                        .WithMany("LearningHistories")
                        .HasForeignKey("PopQuizId")
                        .HasConstraintName("FK_LearningHistories_PopQuizzes");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("LearningHistories")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_LearningHistories_SetupModules");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("LearningHistories")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_LearningHistories_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.MobileInboxes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("MobileInboxesEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_MobileInboxes_Employees");

                    b.HasOne("Talent.Entities.Entities.MobileInboxTypes", "MobileInboxType")
                        .WithMany("MobileInboxes")
                        .HasForeignKey("MobileInboxTypeId")
                        .HasConstraintName("FK_MobileInboxes_MobileInboxTypes");

                    b.HasOne("Talent.Entities.Entities.Employees", "ResignEmployee")
                        .WithMany("MobileInboxesResignEmployee")
                        .HasForeignKey("ResignEmployeeId")
                        .HasConstraintName("FK_MobileInboxes_ResignEmployees");

                    b.HasOne("Talent.Entities.Entities.RotateTeamMembers", "RotateTeamMember")
                        .WithMany("MobileInboxes")
                        .HasForeignKey("RotateTeamMemberId")
                        .HasConstraintName("FK_MobileInboxes_RotateTeams");

                    b.HasOne("Talent.Entities.Entities.TeamMemberRequests", "TeamMemberRequest")
                        .WithMany("MobileInboxes")
                        .HasForeignKey("TeamMemberRequestId")
                        .HasConstraintName("FK_MobileInboxes_TeamMemberRequests");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ModuleTopicMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Modules", "Module")
                        .WithMany("ModuleTopicMappings")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_ModuleTopicMappings_Modules");

                    b.HasOne("Talent.Entities.Entities.Topics", "Topic")
                        .WithMany("ModuleTopicMappings")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK_ModuleTopicMappings_Topics");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Modules", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("ModulesBlob")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Modules_Blobs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Blobs", "MaterialBlob")
                        .WithMany("ModulesMaterialBlob")
                        .HasForeignKey("MaterialBlobId")
                        .HasConstraintName("FK_Modules_MaterialBlobs");

                    b.HasOne("Talent.Entities.Entities.MaterialTypes", "MaterialType")
                        .WithMany("Modules")
                        .HasForeignKey("MaterialTypeId")
                        .HasConstraintName("FK_Modules_MaterialTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.News", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "FileBlob")
                        .WithMany("NewsFileBlob")
                        .HasForeignKey("FileBlobId")
                        .HasConstraintName("FK__News__FileBlobId__63D8CE75");

                    b.HasOne("Talent.Entities.Entities.NewsCategories", "NewsCategory")
                        .WithMany("News")
                        .HasForeignKey("NewsCategoryId")
                        .HasConstraintName("FK__News__NewsCatego__61F08603");

                    b.HasOne("Talent.Entities.Entities.Blobs", "ThumbnailBlob")
                        .WithMany("NewsThumbnailBlob")
                        .HasForeignKey("ThumbnailBlobId")
                        .HasConstraintName("FK__News__ThumbnailB__62E4AA3C");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Outlets", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Areas", "Area")
                        .WithMany("Outlets")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Outlets_Areas")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Cfams", "Cfam")
                        .WithMany("Outlets")
                        .HasForeignKey("Cfamid")
                        .HasConstraintName("FK_Outlets_CFAMs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Cities", "City")
                        .WithMany("Outlets")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Outlets_Cities")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Dealers", "Dealer")
                        .WithMany("Outlets")
                        .HasForeignKey("DealerId")
                        .HasConstraintName("FK_Outlets_Dealers")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Provinces", "Province")
                        .WithMany("Outlets")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Outlets_Provinces")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Regions", "Region")
                        .WithMany("Outlets")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Outlets_Region")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.Pages", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Menus", "Menu")
                        .WithMany("Pages")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_Pages_Menus");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PositionCompentencyMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Competencies", "Competency")
                        .WithMany("PositionCompentencyMappings")
                        .HasForeignKey("CompetencyId")
                        .HasConstraintName("FK_PositionCompentencyMappings_Competencies");

                    b.HasOne("Talent.Entities.Entities.Positions", "Position")
                        .WithMany("PositionCompentencyMappings")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_PositionCompentencyMappings_Positions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PrivilegePageMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Pages", "Page")
                        .WithMany("PrivilegePageMappings")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PrivilegePageMappings_Pages");

                    b.HasOne("Talent.Entities.Entities.Roles", "Role")
                        .WithMany("PrivilegePageMappings")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_PrivilegePageMappings_Roles");
                });

            modelBuilder.Entity("Talent.Entities.Entities.ProductGalleries", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_ProductGalleries_Blobs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Products", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductGalleries_Products");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Products", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Products")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Products_Blobs")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.PushNotificationRecipients", b =>
                {
                    b.HasOne("Talent.Entities.Entities.PushNotifications", "Notification")
                        .WithMany("PushNotificationRecipients")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_Push");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("PushNotificationRecipients")
                        .HasForeignKey("RecipientEmployeeId")
                        .HasConstraintName("FK_Push_Employee_Receiver");
                });

            modelBuilder.Entity("Talent.Entities.Entities.PushNotifications", b =>
                {
                    b.HasOne("Talent.Entities.Entities.PushNotificationCategories", "Category")
                        .WithMany("PushNotifications")
                        .HasForeignKey("NotificationCategoryId")
                        .HasConstraintName("FK_Push_Category");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("PushNotifications")
                        .HasForeignKey("SenderEmployeeId")
                        .HasConstraintName("FK_Push_Employee_Sender");
                });

            modelBuilder.Entity("Talent.Entities.Entities.RewardPoints", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Rewards", "Reward")
                        .WithMany("RewardPoints")
                        .HasForeignKey("RewardId")
                        .HasConstraintName("FK_RewardPoints_Rewards");

                    b.HasOne("Talent.Entities.Entities.RewardPointTypes", "RewardPointType")
                        .WithMany("RewardPoints")
                        .HasForeignKey("RewardPointTypeId")
                        .HasConstraintName("FK_RewardPoints_RewardPointTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Rewards", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Coaches", "Coach")
                        .WithMany("Rewards")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_Rewards_Coaches")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Events", "Event")
                        .WithMany("Rewards")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Rewards_Events");

                    b.HasOne("Talent.Entities.Entities.Modules", "Module")
                        .WithMany("Rewards")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_Rewards_Modules")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.RewardTypes", "RewardType")
                        .WithMany("Rewards")
                        .HasForeignKey("RewardTypeId")
                        .HasConstraintName("FK_Rewards_RewardTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.Roles", b =>
                {
                    b.HasOne("Talent.Entities.Entities.DealerPeopleCategories", "DealerPeopleCategoryCodeNavigation")
                        .WithMany("Roles")
                        .HasForeignKey("DealerPeopleCategoryCode")
                        .HasConstraintName("FK_Roles_DealerPeopleCategories");

                    b.HasOne("Talent.Entities.Entities.Positions", "Position")
                        .WithMany("Roles")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Roles_Positions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.RotateTeamMembers", b =>
                {
                    b.HasOne("Talent.Entities.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("RotateTeamMembers")
                        .HasForeignKey("ApprovalStatusId")
                        .HasConstraintName("FK_RotateTeamMembers_ApprovalStatus");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("RotateTeamMembers")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_RotateTeamMembers_Employees");

                    b.HasOne("Talent.Entities.Entities.Teams", "NextTeam")
                        .WithMany("RotateTeamMembersNextTeam")
                        .HasForeignKey("NextTeamId")
                        .HasConstraintName("FK_RotateTeamMembers_NextTeams");

                    b.HasOne("Talent.Entities.Entities.Teams", "PreviousTeam")
                        .WithMany("RotateTeamMembersPreviousTeam")
                        .HasForeignKey("PreviousTeamId")
                        .HasConstraintName("FK_RotateTeamMembers_PrevTeams");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupLearning", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("SetupLearning")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__SetupLear__Cours__220B0B18");

                    b.HasOne("Talent.Entities.Entities.PopQuizzes", "PopQuiz")
                        .WithMany("SetupLearning")
                        .HasForeignKey("PopQuizId")
                        .HasConstraintName("FK__SetupLear__PopQu__2116E6DF");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("SetupLearning")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_SetupLearning_SetupModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupModules", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("SetupModules")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_SetupModules_Courses")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Modules", "Module")
                        .WithMany("SetupModules")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_SetupModules_Modules");

                    b.HasOne("Talent.Entities.Entities.TimePoints", "TimePoint")
                        .WithMany("SetupModules")
                        .HasForeignKey("TimePointId")
                        .HasConstraintName("FK_SetupModules_TimePoints")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.TrainingTypes", "TrainingType")
                        .WithMany("SetupModules")
                        .HasForeignKey("TrainingTypeId")
                        .HasConstraintName("FK_SetupModules_TrainingTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupTaskCodes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.SetupTasks", "SetupTask")
                        .WithMany("SetupTaskCodes")
                        .HasForeignKey("SetupTaskId")
                        .HasConstraintName("FK_SetupTaskCodes_SetupTasks")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("SetupTaskCodes")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_SetupTaskCodes_Tasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SetupTasks", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Competencies", "Competency")
                        .WithMany("SetupTasks")
                        .HasForeignKey("CompetencyId")
                        .HasConstraintName("FK_SetupTasks_Competencies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Modules", "Module")
                        .WithMany("SetupTasks")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_SetupTasks_Modules")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.PopQuizzes", "PopQuiz")
                        .WithMany("SetupTasks")
                        .HasForeignKey("PopQuizId")
                        .HasConstraintName("FK_SetupTasks_PopQuizzes");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("SetupTasks")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_SetupTasks_SetupModules");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyAnswerDetails", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("SurveyAnswerDetails")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_SurveyAnswerDetails_Blobs");

                    b.HasOne("Talent.Entities.Entities.SurveyAnswers", "SurveyAnswer")
                        .WithMany("SurveyAnswerDetails")
                        .HasForeignKey("SurveyAnswerId")
                        .HasConstraintName("FK_SurveyAnswerDetails_SurveyAnswers");

                    b.HasOne("Talent.Entities.Entities.SurveyQuestions", "SurveyQuestion")
                        .WithMany("SurveyAnswerDetails")
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("FK_SurveyAnswerDetails_SurveyQuestions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyAnswers", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_SurveyAnswers_Employees");

                    b.HasOne("Talent.Entities.Entities.Surveys", "Survey")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_SurveyAnswers_Surveys");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("SurveyChoices")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_SurveyChoices_Blobs");

                    b.HasOne("Talent.Entities.Entities.SurveyQuestions", "SurveyQuestion")
                        .WithMany("SurveyChoices")
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("FK_SurveyChoices_SurveyQuestions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyMatchingChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("SurveyMatchingChoices")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_SurveyMatchingChoices_Blobs");

                    b.HasOne("Talent.Entities.Entities.SurveyQuestions", "SurveyQuestion")
                        .WithMany("SurveyMatchingChoices")
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("FK_SurveyMatchingChoices_SurveyQuestions")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyMatrixChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.SurveyQuestions", "SurveyQuestion")
                        .WithMany("SurveyMatrixChoices")
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("FK_SurveyMatrixChoices_SurveyQuestions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyMatrixQuestions", b =>
                {
                    b.HasOne("Talent.Entities.Entities.SurveyQuestions", "SurveyQuestion")
                        .WithMany("SurveyMatrixQuestions")
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("FK_SurveyMatrixQuestions_SurveyQuestions");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyOutletMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Outlets", "Outlet")
                        .WithMany("SurveyOutletMappings")
                        .HasForeignKey("OutletId")
                        .HasConstraintName("FK_SurveyOutletMappings_Outlets");

                    b.HasOne("Talent.Entities.Entities.Surveys", "Survey")
                        .WithMany("SurveyOutletMappings")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_SurveyOutletMappings_Surveys");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyPositionMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Positions", "Position")
                        .WithMany("SurveyPositionMappings")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_SurveyPositionMappings_Positions");

                    b.HasOne("Talent.Entities.Entities.Surveys", "Survey")
                        .WithMany("SurveyPositionMappings")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_SurveyPositionMappings_Surveys");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveyQuestions", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_SurveyQuestions_Blobs");

                    b.HasOne("Talent.Entities.Entities.Surveys", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_SurveyQuestions_Surveys");

                    b.HasOne("Talent.Entities.Entities.SurveyQuestionTypes", "SurveyQuestionType")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyQuestionTypeId")
                        .HasConstraintName("FK_SurveyQuestions_SurveyQuestionTypes");
                });

            modelBuilder.Entity("Talent.Entities.Entities.SurveySpecialAnswers", b =>
                {
                    b.HasOne("Talent.Entities.Entities.SurveyAnswerDetails", "SurveyAnswerDetail")
                        .WithMany("SurveySpecialAnswers")
                        .HasForeignKey("SurveyAnswerDetailId")
                        .HasConstraintName("FK_SurveySpecialAnswers_SurveyAnswerDetails");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskAnswerDetails", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "AnswerBlob")
                        .WithMany("TaskAnswerDetails")
                        .HasForeignKey("AnswerBlobId")
                        .HasConstraintName("FK_TaskAnswerDetails_Blobs");

                    b.HasOne("Talent.Entities.Entities.TaskAnswers", "TaskAnswer")
                        .WithMany("TaskAnswerDetails")
                        .HasForeignKey("TaskAnswerId")
                        .HasConstraintName("FK_TaskAnswerDetails_TaskAnswers");

                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskAnswerDetails")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskAnswerDetails_Tasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskAnswers", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_TaskAnswers_Employees");

                    b.HasOne("Talent.Entities.Entities.PopQuizzes", "PopQuiz")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("PopQuizId")
                        .HasConstraintName("FK_TaskAnswers_PopQuizzes");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_TaskAnswers_SetupModules");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_TaskAnswers_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskChecklistChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskChecklistChoices")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskChecklistChoices_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskChecklistTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskChecklistTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskChecklistTypes", "TaskId")
                        .HasConstraintName("FK_TaskChecklistTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskEssayTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskEssayTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskEssayTypes", "TaskId")
                        .HasConstraintName("FK_TaskEssayTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskFileUploadTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskFileUploadTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskFileUploadTypes", "TaskId")
                        .HasConstraintName("FK_TaskFileUploadTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskHotSpotAnswers", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskHotSpotAnswers")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskHotSpotAnswers_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskHotSpotTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("TaskHotSpotTypes")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_TaskHotSpotTypes_Blobs");

                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskHotSpotTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskHotSpotTypes", "TaskId")
                        .HasConstraintName("FK_TaskHotSpotTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatchingChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("TaskMatchingChoices")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_TaskMatchingChoices_Blobs");

                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskMatchingChoices")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskMatchingChoices_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatchingTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskMatchingTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskMatchingTypes", "TaskId")
                        .HasConstraintName("FK_TaskMatchingTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatrixChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskMatrixChoices")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskMatrixChoices_Tasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatrixQuestions", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskMatrixQuestions")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskMatrixQuestions_Tasks");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMatrixTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskMatrixTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskMatrixTypes", "TaskId")
                        .HasConstraintName("FK_TaskMatrixTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMultipleChoiceChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskMultipleChoiceChoices")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskMultipleChoiceChoices_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskMultipleChoiceTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskMultipleChoiceTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskMultipleChoiceTypes", "TaskId")
                        .HasConstraintName("FK_TaskMultipleChoiceTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskRatingChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskRatingChoices")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskRatingChoices_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskRatingTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskRatingTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskRatingTypes", "TaskId")
                        .HasConstraintName("FK_TaskRatingTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskSequenceChoices", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskSequenceChoices")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskSequenceChoices_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskSequenceTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskSequenceTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskSequenceTypes", "TaskId")
                        .HasConstraintName("FK_TaskSequenceTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskShortAnswerTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskShortAnswerTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskShortAnswerTypes", "TaskId")
                        .HasConstraintName("FK_TaskShortAnswerTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskSpecialAnswers", b =>
                {
                    b.HasOne("Talent.Entities.Entities.TaskAnswerDetails", "TaskAnswerDetail")
                        .WithMany("TaskSpecialAnswers")
                        .HasForeignKey("TaskAnswerDetailId")
                        .HasConstraintName("FK_TaskSpecialAnswers_TaskAnswerDetails");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskTebakGambarPictures", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("TaskTebakGambarPictures")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_TaskTebakGambarPictures_Blobs");

                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithMany("TaskTebakGambarPictures")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_TaskTebakGambarPictures_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskTebakGambarTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskTebakGambarTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskTebakGambarTypes", "TaskId")
                        .HasConstraintName("FK_TaskTebakGambarTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TaskTrueFalseTypes", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Tasks", "Task")
                        .WithOne("TaskTrueFalseTypes")
                        .HasForeignKey("Talent.Entities.Entities.TaskTrueFalseTypes", "TaskId")
                        .HasConstraintName("FK_TaskTrueFalseTypes_Tasks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.Tasks", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Tasks")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Tasks_Blobs");

                    b.HasOne("Talent.Entities.Entities.Competencies", "Competency")
                        .WithMany("Tasks")
                        .HasForeignKey("CompetencyId")
                        .HasConstraintName("FK_Tasks_Competencies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.EvaluationTypes", "EvaluationType")
                        .WithMany("Tasks")
                        .HasForeignKey("EvaluationTypeId")
                        .HasConstraintName("FK_Tasks_EvaluationTypes");

                    b.HasOne("Talent.Entities.Entities.Modules", "Module")
                        .WithMany("Tasks")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_Tasks_Modules")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.QuestionTypes", "QuestionType")
                        .WithMany("Tasks")
                        .HasForeignKey("QuestionTypeId")
                        .HasConstraintName("FK_Tasks_QuestionTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TeamDetails", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("TeamDetails")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_TeamDetails_Employees");

                    b.HasOne("Talent.Entities.Entities.Teams", "Team")
                        .WithMany("TeamDetails")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_TeamDetails_Teams");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TeamMemberRequests", b =>
                {
                    b.HasOne("Talent.Entities.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("TeamMemberRequests")
                        .HasForeignKey("ApprovalStatusId")
                        .HasConstraintName("FK_TeamMemberRequests_ApprovalStatus");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("TeamMemberRequests")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_TeamMemberRequests_Employees");

                    b.HasOne("Talent.Entities.Entities.Teams", "Team")
                        .WithMany("TeamMemberRequests")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_TeamMemberRequests_Teams");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Teams", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "TeamLeader")
                        .WithMany("Teams")
                        .HasForeignKey("TeamLeaderId")
                        .HasConstraintName("FK_Teams_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TimePoints", b =>
                {
                    b.HasOne("Talent.Entities.Entities.PointTypes", "PointType")
                        .WithMany("TimePoints")
                        .HasForeignKey("PointTypeId")
                        .HasConstraintName("FK_TimePoints_PointTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.Topics", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Blobs", "Blob")
                        .WithMany("Topics")
                        .HasForeignKey("BlobId")
                        .HasConstraintName("FK_Topics_Blobs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Ebadges", "Ebadge")
                        .WithMany("Topics")
                        .HasForeignKey("EbadgeId")
                        .HasConstraintName("FK_Topics_EBadges")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingInvitations", b =>
                {
                    b.HasOne("Talent.Entities.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany("TrainingInvitations")
                        .HasForeignKey("ApprovalStatusId")
                        .HasConstraintName("FK_TrainingInvitations_ApprovalStatus");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("TrainingInvitations")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_TrainingInvitations_Employees");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("TrainingInvitations")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_TrainingInvitations_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingModuleMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Coaches", "Coach")
                        .WithMany("TrainingModuleMappings")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_TrainingModuleMappings_Coaches");

                    b.HasOne("Talent.Entities.Entities.SetupModules", "SetupModule")
                        .WithMany("TrainingModuleMappings")
                        .HasForeignKey("SetupModuleId")
                        .HasConstraintName("FK_TrainingModuleMappings_SetupModules");

                    b.HasOne("Talent.Entities.Entities.TimePoints", "TimePoint")
                        .WithMany("TrainingModuleMappings")
                        .HasForeignKey("TimePointId")
                        .HasConstraintName("FK_TrainingModuleMappings_TimePoints");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("TrainingModuleMappings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_TrainingModuleMappings_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingOutletMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Outlets", "Outlet")
                        .WithMany("TrainingOutletMappings")
                        .HasForeignKey("OutletId")
                        .HasConstraintName("FK_TrainingOutletMappings_Outlets")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("TrainingOutletMappings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_TrainingOutletMappings_Trainings")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingPositionMappings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Positions", "Position")
                        .WithMany("TrainingPositionMappings")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_TrainingPositionMappings_Positions")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("TrainingPositionMappings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_TrainingPositionMappings_Trainings")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingProcesses", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Accommodations", "Accomodation")
                        .WithMany("TrainingProcesses")
                        .HasForeignKey("AccomodationId")
                        .HasConstraintName("FK_TrainingProcesses_Accommodation");

                    b.HasOne("Talent.Entities.Entities.TrainingInvitations", "TrainingInvitation")
                        .WithMany("TrainingProcesses")
                        .HasForeignKey("TrainingInvitationId")
                        .HasConstraintName("FK_TrainingProcesses_TrainingInvitation");
                });

            modelBuilder.Entity("Talent.Entities.Entities.TrainingRatings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("TrainingRatings")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_TrainingRating_Courses");

                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("TrainingRatings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_TrainingRatings_Employees");

                    b.HasOne("Talent.Entities.Entities.Trainings", "Training")
                        .WithMany("TrainingRatings")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_TrainingRating_Trainings");
                });

            modelBuilder.Entity("Talent.Entities.Entities.Trainings", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Courses", "Course")
                        .WithMany("Trainings")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Trainings__Cours__5A846E65");
                });

            modelBuilder.Entity("Talent.Entities.Entities.UpgradeAccountApprovals", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("UpgradeAccountApprovals")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Upgrade_Approvals_Employees");
                });

            modelBuilder.Entity("Talent.Entities.Entities.UserFcmTokens", b =>
                {
                    b.HasOne("Talent.Entities.Entities.Employees", "Employee")
                        .WithMany("UserFcmTokens")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_User_Fcm_Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
